---
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'
import LinkButton from '../components/LinkButton.astro'
import { PAGE_TITLE_ID } from '../constants'
import SpectrumGradient from "/src/assets/spectrum-gradient-square.svg"

const { data } = Astro.locals.starlightRoute.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
  loading: 'eager' as const,
  decoding: 'async' as const,
  width: 400,
  height: 400,
  alt: image?.alt || '',
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
  if ('file' in image) {
    darkImage = image.file;
  } else if ('dark' in image) {
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawHtml = image.html;
  }
}
---

<section class="hero-container h-screen h-svh w-full pb-20 flex items-center justify-center relative overflow-hidden">
  <SpectrumGradient class="rotating-bg absolute top-0 left-0 w-full h-full z-0 opacity-100 dark:opacity-60" style="object-fit: cover;" preserveAspectRatio="xMidYMid slice" />
  <div class="max-w-6xl w-full px-12 flex flex-col md:flex-row items-center gap-4 md:gap-16 relative z-10">
    <div class="flex justify-center md:order-2 flex-1 order-1 drop-shadow-sm">
      {darkImage && <Image src={darkImage} {...imageAttrs} class:list={[{ 'light:sl-hidden': Boolean(lightImage) }, "w-48 h-48 md:w-80 md:h-80 object-contain"]} />}
      {lightImage && <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden w-48 h-48 md:w-80 md:h-80 object-contain" />}
      {rawHtml && <div class="hero-html sl-flex w-48 h-48 md:w-80 md:h-80" set:html={rawHtml} />}
    </div>
    <div class="md:order-1 flex-1 flex flex-col items-center md:items-start text-center md:text-left order-2">
      <h1 class="tracking-tight leading-tight font-bold text-3xl md:text-4xl lg:text-5xl md:leading-tight" id={PAGE_TITLE_ID} data-page-title set:html={title} />
      {tagline && <div class="text-foreground font-light text-lg leading-7 max-w-2xl mt-4" set:html={tagline} />}
      {
        actions.length > 0 && (
          <div class="mt-8 flex gap-4 flex-wrap justify-center md:justify-start">
            {actions.map(({ attrs: { class: className, ...attrs } = {}, icon, link: href, text, variant }) => (
              <LinkButton {href} {variant} class:list={[className]} {...attrs}>
                {text}
                {icon?.html && <Fragment set:html={icon.html} />}
              </LinkButton>
            ))}
          </div>
        )
      }
    </div>
  </div>
</section>

<style>
.hero-container::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--gradient-hero-fade);
  pointer-events: none;
  z-index: 1;
}

@keyframes rotate {
  from { transform: translate(-50%, -50%) rotate(0deg); }
  to { transform: translate(-50%, -50%) rotate(360deg); }
 }

.rotating-bg {
  animation: rotate 10s linear infinite;
  transform-origin: center;
  width: max(141.42vw, 141.42vh);
  height: max(141.42vw, 141.42vh);
  top: 50%;
  left: 50%;
}
</style>

